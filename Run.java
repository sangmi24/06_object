package com.kh.chap01_abstraction.run;

import com.kh.chap01_abstraction.model.vo.Student;

public class Run {

	/*
	 * 1. 객체지향언어: "객체"를 "지향하는"언어로 "객체중심"으로 돌아간다.
	 * 
	 * 2. 객체란? 
	 *   사전적 의미로는 현실세계에 독립적으로 존재하는 모든 것들을 의미
	 *   목적이 있고, 의미가 있는 독립적인 개체 (사람, 물, 공기, ...)
	 *   
	 * 3. 객체지향 프로그래밍
	 *   현실세계에서 독립적인 존재들(객체) 간의 상호작용(행동, 행위 )을 만들어내겠다.  
	 *   => 프로그래밍을 통해 가상세계(코드)로 구현하는 과정이다.
	 *   
	 * 4. 우선 구현하고자 하는 프로그램 상의 필요한 객체를 만들기 위해서는 "클래스"라는 틀을 먼저 만들어야 함  
	 *    우리가 원래 알던 클래스 : 비슷한 역할을 하는 코드들의 모임(변수와 메소드들을 묶은 단위)  클래스는 그릇임 
	 *    객체지향적인 클래스의 정의 : 각 객체들의 속성(변수와 메소드 => 정보 )들을 담아낼 수 있는 그릇과도 같은 존재  //변수-객체, 메소드-행동
	 * 
	 * 5. 현실세계를 프로그램 코드로 구현하는 단계
	 * -1단계: 추상화 
	 * -2단계: 캡슐화
	 *  
	 * 6. 추상화 과정 : 현실세계의 것을 코드로 어떻게 구현할건지 생각하는 단계
	 *   1단계) 내가 만들고자하는 프로그램에서 필요한 객체들을 생각해볼 것   
	 *     예) 학생관리프로그램 => 학생객체 : 홍길동학생, 김갑생학생, 박말똥학생, ...=> 학생 한명 한명
	 *   2단계) 그 객체들이 가지고 있는 공통적인 특성, 기능들을 추려낼 것 
	 *     예) 학생객체의 공통적인 특성,기능: 이름,나이,성별,주소,발사이즈,키,몸무게,성적,혈액형,장래희망,학년,연락처
	 *   3단계) 그렇게 추출한 것들을 가지고 내가 구현할 프로그램의 "실질적인 목적"에 맞게
	 *       불필요한 속성과 필요한 속성을 나눌것 
	 *      예) 학생관리 프로그램 : 이름,나이,성별,성적,장래희망,학년,연락처,...         
	 *   4단계) 최종적으로 추려진 것들을 가지고 어떤 자료형에 어떤 변수이름으로 사용할건지 생각해볼 것
	 *     예) 이름 : String name; 
	 *        나이 :  int age;
	 *        성별 : char gender;
	 *        성적: int score; 또는 char grade;
	 *        ...
	 *   
	 *          
	 *   예) 학생 관련 프로그램
	 *   1단계) 학생과 관련된 객체 (홍길동학생, 김영희학생, 박말똥학생, ..)        
	 *   2단계) 공통적인 속성 및 기능들 추리기(이름,나이,주소,전화번호,키,달리기속도,학년,반,국어점수,수학점수,몸무게,....
	 *                             밥을먹는다, 잠을잔다,공부를한다,숨을쉰다,출석한다...)
	 *   3단계) 프로그램의 실질적인 목적에 맞게 더 추리기
	 *        학생의 "인적사항"을 관리하는 프로그램: 이름,나이,성별,주소,전화번호,학년,반 만 추려낸다.
	 *        학생의 "성적"을 관리하는 프로그램: 이름,학년,반,학번,국어점수,수학점수,출석한다,공부를한다 만 추려낸다.
	 *        학생의 "건강"을 관리하는 프로그램: 이름, 키, 학년,반, 몸무게,달리기 속도, 밥을먹는다,잠을잔다,숨을쉰다 만 추려낸다.
	 *        => 추려내는 과정이 가장 핵심적인 과정이다! (설계과정)
 	 *          이름, 나이, 키 를 추려냈다고 가정하에 4단계로 넘어가보자!
 	 *   4단계) 어디에 어떤 자료형으로 저장할건지 고민
 	 *       이름: String name;
 	 *       나이: int age;
 	 *       키: double height;
 	 *       
 	 * 7. 위에 선정된 것들을 가지고 본격적으로 프로그래밍을 해볼 것
 	 *   1) "변수" 만을 가지고 프로그래밍을 하게 된다면?
 	 *      변수: 하나의 자료형인 하나의 값만 보관 가능한 개념
 	 *      홍길동학생 이라는 객체를 하나 만들기 위해서 필요한 변수의 갯수는? 3개
 	 *      => String name1 = "홍길동"; int age1=20; double height1= 170.1;
 	 *      => String name2 = "고영희"; int age2=21; double height2= 168.0;
 	 *      => String name3 = "박말똥"; int age3=25; double height3= 185.33;
 	 *      ...
 	 *      => 수백명의 학생을 관리하는 프로그램을 구현해야 할 경우에는
 	 *         수천개의 변수가 생겨날것. 만들기도 힘들고, 유지보수 하기도 힘듬 (코드를 관리하기가 힘듬)
 	 *   2) "배열"을 가지고 프로그래밍을 한다면?
 	 *      배열: 하나의 자료형인 여러개의 값들을 동시에 보관할 수 있는 개념 
 	 *      => 학생들의 이름들을 보관할 수 있는 배열 : String[] names = {"홍길동","고영희", "박말똥",...};
 	 *      => 학생들의 나이들을 보관할 수 있는 배열: int[] ages= {20,21,25,...}; 
 	 *      => 학생들의 키들을 보관할 수 있는 배열 : double[] hights={170.1 , 168.0 , 185.33,... };
 	 *      => 만약 학생의 수가 늘어난다면? 배열에 각각 추가 => 한번 정해진 배열의 크기는 변하지 않음(정원 초과 시에는 더 큰 배열을 새로만들고 기존의 정보도 복사떠놔야함)
 	 *      => 만약 학생이 전학간다면? 그 해당 인덱스에 해당하는 곳의 정보만 지워야 한다.=> 실수할 가능성이 너무너무 높음
 	 *      => 뭔가 변수를 이용할 때보다는 나아보이기는 하지만 아직도 별로긴 함..
 	 *   3) 그래서 나온 개념이 "구조체"라는 개념
 	 *    구조체 : 한번에 여러개의 자료형을 보관할 수 있는 배열같은 개념 
 	 *           => String 값도 보관할 수 있고, int값도 보관할 수 있고, double값도 보관할수 있는 배열같은 형태의 나만의 자료형을 만들어보자!
 	 *           => 그게 바로 자바에서의 "클래스" (String,int,double,char,메소드들을 한번에 담을수 있는 그릇)
 	 *     
 	 *  * 클래스: 각 객체들의 속성 정보들을 담아내는 그릇과도 같은 존재(틀) => VO (Value Object)
 	 *    예) Student => String name; int age; double height;             
     *
     *   참고)
     *   변수 선언
     *   자료형 변수명; => String name; int age; double height;
     *   배열 선언
     *   자료형[] 배열명; => int[] ages;
     *   클래스 선언
     *   클래스명 객체(대변할이름); => Student student;   
	 */
	
	
	public static void main(String[] args) {
	
     // 변수만을 가지고 프로그래밍을 하게 된다면?
		String name1 = "홍길동";
		int age1 = 20;
		double height1 = 170.4;
		
		//클래스라는 개념을 가지고 프로그래밍을 할것!
		
		//1. Student 라는 클래스를 만들었음
		
		//2. 만들어진 Student라는 클래스를 통해서 객체(==참조형 변수) 생성
		//기본형변수=> 자료형 변수명; 
		//참조형변수=> 자료형 변수명 = new 자료형();  //대표적으로 배열
		
		Student student = new Student();
		//그동안은 메소드를 호출할 때 객체명.메소드명(); 이렇게 호출했었음!
		//       필드의 이름을 불러와서 거기에 담긴 값을 뽑아오고 싶음 => 객체명.필드명
		
		//3. 필요한 값을 필드에 담기 
		student.name = "홍길동";
		student.age = 20;
		student.height= 170.4;
		//해당 student 라는 객체의 각 필드에 직접적으로 접근해서 값을 대입
		
		//4. 값이 잘 담겼는지 출력
		System.out.println(student); //주소값이 튀어나올것임! => 우리가 원하는 결과?x(참조형변수라서)
		System.out.println(student.name);  //홍길동
		System.out.println(student.age);   //20
		System.out.println(student.height); //170.4
		//해당 student 라는 객체의 각 필드에 직접적으로 접근해서 값을 조회함
		// .도 직접연산자 
		
		//xxx 님의 나이는 xx살이고,키는 xxxcm 입니다. 형식으로 출력하고싶다.
		System.out.println(student.name+"님의 나이는 "+student.age+"살이고,"
				+ " 키는 "+student.height+"cm 입니다");
		//=> 여기까지 홍길동 학생을 나타내는 객체를 만들고 값을 대입해서 출력까지 해본것
		
		//한개만 더
		Student kim = new Student();
		
		kim.name = "김영희";
		kim.age = 21;
		kim.height = 159.9;
		
		System.out.println(kim.name+"님의 나이는 "+kim.age+"살이고, "
				+ "키는 "+kim.height+"cm 입니다.");
		/*
		 * 여태까지 한 객체지향 프로그래밍 단계
		 * 1단계)추상화 => 고민하는 단계(이름, 나이, 키)
		 * 코딩으로 적용 => 변수 -> 배열-> 클래스 
		 *              학생을 표현할 수 있는 클래스(Student) 만들기 : name, age, height 필드 만듬
		 *              "생성"   (new를 이용=> heap 영역에 실제 학생 정보를 담을 공간 확보)
		 *              . 을 통해서 필드에 직접접근(값도 대입해보고, 값을 조회도 해보고) 
		 * 
		 * 2단계) 캡슐화
		 *                
		 *              
		 */
		
		// 직접적으로 접근해서 값을 대입하거나 조회할 경우 보안적인 문제가 생길 수 있다.
		// 보안의 3요소 : 기밀성(비밀지켜), 무결성(변화있으면안돼), 가용성(허락된 사람만)
		//=> 값을 직접적으로 접근해서 어떠한 행위가 일어난다면, 조회했을때에는 기밀성이,값을 대입했을경우에는 무결성이 깨질 수 있다.
		//=> 객체지향 설계 원칙 중 하나가 정보 은닉(숨기다) : 정보를 숨겨주는 단계가 "캡슐화" ( .으로 직접접근이 불가능하게 막겠다)
		
		/*
		 * 이 시점 기준으로는 캡슐화가 된 상태
		 * 
		 * 캡슐화가 된 상태에서 .을 통해 필드에 그대로 접근한다면?
		 * The field 클래스명.필드명 is not visible
		 * 오류가 발생
		 * => 해당 클래스에 있는 해당 필드를 찾을수 없다라는 뜻 
		 *    (해당 필드를 우리가 이미 private 으로 숨겨놨기 때문)
		 */
		
		
		
		
		
		
		
		
		
	}

}














